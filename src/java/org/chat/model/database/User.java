package org.chat.model.database;
// Generated 10-nov-2016 15.53.56 by Hibernate Tools 4.3.1

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.chat.model.singleton.UserDatabase;

/**
 * User generated by hbm2java
 */
public class User implements java.io.Serializable {

    private String username;
    private String password;
    private String avatar;
    private boolean online;
    private boolean hasChange;
    private Boolean isGroup;

    private Map<User, LinkedList<Message>> userMessages;
    private Map<User, LinkedList<Message>> bufferUserMessages;
    
    private List<Message> chatRoomMessages;
    private List<Message> chatRoombufferMessages;

    private Set<Message> messagesForIdTo = new HashSet<Message>(0);
    private Set<Message> messagesForIdFrom = new HashSet<Message>(0);

    public User() {
    }

    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.online = false;
        this.hasChange = false;
        this.isGroup = false;

        this.userMessages = new HashMap<>();
        this.bufferUserMessages = new HashMap<>();
        
        this.chatRoomMessages = new LinkedList<>();
        this.chatRoombufferMessages = new LinkedList<>();
    }

    public User(String username, String password, String avatar, Set<Message> messagesForIdTo, Set<Message> messagesForIdFrom) {
        this.username = username;
        this.password = password;
        this.avatar = avatar;
        this.online = false;
        this.hasChange = true;

        this.userMessages = new HashMap<>();
        this.bufferUserMessages = new HashMap<>();

        this.messagesForIdTo = messagesForIdTo;
        this.messagesForIdFrom = messagesForIdFrom;
    }

    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getAvatar() {
        return this.avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public Set<Message> getMessagesForIdTo() {
        return this.messagesForIdTo;
    }

    public void setMessagesForIdTo(Set<Message> messagesForIdTo) {
        this.messagesForIdTo = messagesForIdTo;
    }

    public Set<Message> getMessagesForIdFrom() {
        return this.messagesForIdFrom;
    }

    public void setMessagesForIdFrom(Set<Message> messagesForIdFrom) {
        this.messagesForIdFrom = messagesForIdFrom;
    }

    public String isOnline() {
        if(online) 
            return "Online";
        return "Offline";
    }

    public void setOnline(boolean online) {
        this.online = online;
    }
    
    public boolean hasChange() {
        return this.hasChange;
    }

    public void setHasChange(boolean change) {
        this.hasChange = change;
    }

    public Map<User, LinkedList<Message>> getUserMessages() {
        if(userMessages == null)
            userMessages = new HashMap<>();
        return userMessages;
    }

    public Map<User, LinkedList<Message>> getBufferUserMessages() {
        if(bufferUserMessages == null)
            bufferUserMessages = new HashMap<>();
        return bufferUserMessages;
    }
    
    public int countSizeOfBuffer(String user){
        if(this.getBufferUserMessages().get(UserDatabase.getInstance().get(user.toUpperCase())) != null){
            return this.getBufferUserMessages().get(UserDatabase.getInstance().get(user.toUpperCase())).size();
        }
        else
            return 0;
    }
    public int countSizeOfMessages(String user){
        if(this.getUserMessages().get(UserDatabase.getInstance().get(user)) != null){
            return this.getUserMessages().get(UserDatabase.getInstance().get(user)).size();
        }
        else
            return 0;
    }

    @Override
    public String toString() {
        return "User{" + "username=" + username + ", password=" + password + ", avatar=" + avatar + ", online=" + online + ", hasChange=" + hasChange 
                + ", \n\t\tmessagesForIdTo=" + messagesForIdTo.size()
                + ", \n\t\tmessagesForIdFrom=" + messagesForIdFrom.size() 
                + ", \n\t\tuserMessages=" + this.countSizeOfMessages(username)
                + ", \n\t\tuserBufferMessages=" + this.countSizeOfBuffer(username) + '}';
    }

    /**
     * @return the isGroup
     */
    public Boolean getIsGroup() {
        return isGroup;
    }

    /**
     * @param isGroup the isGroup to set
     */
    public void setIsGroup(Boolean isGroup) {
        this.isGroup = isGroup;
    }

    /**
     * @return the chatRoomMessages
     */
    public List<Message> getChatRoomMessages() {
        if(chatRoomMessages == null)
            chatRoomMessages = new LinkedList<>();
        return chatRoomMessages;
    }

    /**
     * @param chatRoomMessages the chatRoomMessages to set
     */
    public void setChatRoomMessages(List<Message> chatRoomMessages) {
        this.chatRoomMessages = chatRoomMessages;
    }

    /**
     * @return the chatRoombufferMessages
     */
    public List<Message> getChatRoombufferMessages() {
        if(chatRoombufferMessages == null)
            chatRoombufferMessages = new LinkedList<>();
        return chatRoombufferMessages;
    }

    /**
     * @param chatRoombufferMessages the chatRoombufferMessages to set
     */
    public void setChatRoombufferMessages(List<Message> chatRoombufferMessages) {
        this.chatRoombufferMessages = chatRoombufferMessages;
    }
}
